using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Fortnox.SDK.Exceptions;

namespace Fortnox.SDK.Auth;

/// <summary>
/// Represents methods of OAuth 2.0 workflow.
/// </summary>
/// <remarks><see href="https://oauth.net/" /> and <see href="https://developer.fortnox.se/general/authentication/" /></remarks>
public interface IStandardAuthWorkflow
{
    /// <summary>
    /// Use this function exchange authorization code for an OAuth access token.
    /// </summary>
    /// <param name="authCode">OAuth 2 authorization code.</param>
    /// <param name="clientId">Client id given to you by Fortnox.</param>
    /// <param name="clientSecret">Client secret given to you by Fortnox.</param>
    /// <param name="redirectUri">Redirect URI configured at Fortnox.</param>
    /// <returns>OAuth 2 token information.</returns>
    /// <exception cref="FortnoxApiException">If the Fortnox API returns an error.</exception>
    /// <remarks>
    /// <para>The authorization code is valid for 10 minutes. It can only be used once.</para>
    /// <para>The access token is valid for 1 hour. It can be re-used several times.</para>
    /// <para>The refresh token is valid for 1 month (31 days). It can only be used once.</para>
    /// </remarks>
    Task<TokenInfo> GetTokenAsync(string authCode, string clientId, string clientSecret, string redirectUri = null);

    /// <summary>
    /// Use this function to obtain new token info.
    /// Note, that the new refresh token is also generated by this action and the one used becomes invalid.
    /// </summary>
    /// <param name="refreshToken">OAuth 2 refresh token.</param>
    /// <param name="clientId">Client id given to you by Fortnox.</param>
    /// <param name="clientSecret">Client secret given to you by Fortnox.</param>
    /// <returns>OAuth 2 token information.</returns>
    /// <remarks>The refresh token is valid for 1 month (31 days). It can only be used once.</remarks>
    Task<TokenInfo> RefreshTokenAsync(string refreshToken, string clientId, string clientSecret);

    /// <summary>
    /// Generates a state nonce for use with the <see cref="BuildAuthUri"/> method.
    /// </summary>
    /// <returns>A randomly-generated string.</returns>
    string GenerateState();

    /// <summary>
    /// Use this function to build the full URI for OAuth 2.0 workflow initialization.
    /// </summary>
    /// <param name="clientId">Client id given to you by Fortnox.</param>
    /// <param name="scopes">OAuth scopes to request.</param>
    /// <param name="state">The state parameter is used by the application to store request-specific data and/or
    /// prevent CSRF attacks. The authorization server will return the unmodified state value back to the application.</param>
    /// <param name="redirectUri">URI to redirect back to from Fortnox.</param>
    /// <returns>A URI.</returns>
    Uri BuildAuthUri(string clientId, IEnumerable<Scope> scopes, string state, string redirectUri = null);

    /// <summary>
    /// Use this function to revoke a refresh token
    /// </summary>
    /// <param name="refreshToken">OAuth 2 refresh token to be revoked. </param>
    /// <param name="clientId">Client id given to you by Fortnox.</param>
    /// <param name="clientSecret">Client secret given to you by Fortnox.</param>
    /// <returns>"Revoked" property taken from the API response.</returns>
    /// <exception cref="FortnoxApiException">If the Fortnox API returns an error.</exception>
    Task<bool> RevokeRefreshTokenAsync(string refreshToken, string clientId, string clientSecret);
}