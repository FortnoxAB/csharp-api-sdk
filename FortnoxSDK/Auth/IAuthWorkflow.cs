using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Fortnox.SDK.Auth
{
    /// <summary>
    /// Represents methods of OAuth 2 workflow.
    /// </summary>
    /// <remarks>https://oauth.net/</remarks>
    public interface IStandardAuthWorkflow
    {
        /// <summary>
        /// Use this function exchange authorization code for an OAuth access token.
        /// </summary>
        /// <param name="authCode">OAuth 2 authorization code.</param>
        /// <param name="clientId">Client id given to you by Fortnox.</param>
        /// <param name="clientSecret">Client secret given to you by Fortnox.</param>
        /// <param name="redirectUri">Redirect URI given to you by Fortnox.</param>
        /// <returns>OAuth 2 token info.</returns>
        /// <remarks>
        /// The authorization code is valid for 10 minutes. It can only be used once.
        /// The token is valid for 10 minutes. It can be used re-used several times.
        /// </remarks>
        TokenInfo GetToken(string authCode, string clientId, string clientSecret, string redirectUri = null);

        /// <summary>
        /// Use this function exchange authorization code for an OAuth access token.
        /// </summary>
        /// <param name="authCode">OAuth 2 authorization code.</param>
        /// <param name="clientId">Client id given to you by Fortnox.</param>
        /// <param name="clientSecret">Client secret given to you by Fortnox.</param>
        /// <param name="redirectUri">Redirect URI given to you by Fortnox.</param>
        /// <returns>OAuth 2 token info.</returns>
        /// <remarks>
        /// The authorization code is valid for 10 minutes. It can only be used once.
        /// The token is valid for 10 minutes. It can be used re-used several times.
        /// </remarks>
        Task<TokenInfo> GetTokenAsync(string authCode, string clientId, string clientSecret, string redirectUri = null);

        /// <summary>
        /// Use this function to obtain new token info.
        /// Note, that the new refresh token is also generated by this action and the one used becomes invalid.
        /// </summary>
        /// <param name="refreshToken">OAuth 2 refresh token.</param>
        /// <param name="clientId">Client id given to you by Fortnox.</param>
        /// <param name="clientSecret">Client secret given to you by Fortnox.</param>
        /// <returns>OAuth 2 token info.</returns>
        /// <remarks>The refresh token is valid for 30 days. It can be used only once.</remarks>
        TokenInfo RefreshToken(string refreshToken, string clientId, string clientSecret);

        /// <summary>
        /// Use this function to obtain new token info.
        /// Note, that the new refresh token is also generated by this action and the one used becomes invalid.
        /// </summary>
        /// <param name="refreshToken">OAuth 2 refresh token.</param>
        /// <param name="clientId">Client id given to you by Fortnox.</param>
        /// <param name="clientSecret">Client secret given to you by Fortnox.</param>
        /// <returns>OAuth 2 token info.</returns>
        /// <remarks>The refresh token is valid for 30 days. It can be used only once.</remarks>
        Task<TokenInfo> RefreshTokenAsync(string refreshToken, string clientId, string clientSecret);

        /// <summary>
        /// Use this function build the auth URI for workflow initialization.
        /// </summary>
        /// <param name="clientId">Client id given to you by Fortnox.</param>
        /// <param name="redirectUri">URI to redirect to.</param>
        /// <param name="scopes">OAuth scopes to request.</param>
        /// <param name="state">The state parameter is used by the application to store request-specific data and/or
        /// prevent CSRF attacks. The authorization server will return the unmodified state value back to the application.</param>
        /// <returns>A URI.</returns>
        string BuildAuthUri(string clientId, IEnumerable<Scope> scopes, string state, string redirectUri = null);
    }

    /// <summary>
    /// Represents methods of a Fortnox legacy auth workflow.
    /// </summary>
    [Obsolete("2021-12-09: End-of-life for the static authorization. Use StandardAuth.")]
    public interface IStaticTokenAuthWorkflow
    {
        /// <summary>
        /// <para>Use this function to activate new integration and retrieve Access-Token.</para>
        /// <remarks>Note that an authorization-code can be used only once. Save the retrieved Access-Token in order to use it for FortnoxClient.</remarks>
        /// </summary>
        /// <param name="authCode">The API-code (authorization code) given to you by Fortnox</param>
        /// <param name="clientSecret">The Client-Secret code given to you by Fortnox</param>
        /// <returns>The Access-Token to use with Fortnox</returns>
        string GetToken(string authCode, string clientSecret);

        /// <summary>
        /// <para>Use this function to activate new integration and retrieve Access-Token.</para>
        /// <remarks>Note that an authorization-code can be used only once. Save the retrieved Access-Token in order to use it for FortnoxClient.</remarks>
        /// </summary>
        /// <param name="authCode">The API-code (authorization code) given to you by Fortnox</param>
        /// <param name="clientSecret">The Client-Secret code given to you by Fortnox</param>
        /// <returns>The Access-Token to use with Fortnox</returns>
        Task<string> GetTokenAsync(string authCode, string clientSecret);
    }
}
