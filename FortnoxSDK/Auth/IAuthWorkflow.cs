using System.Collections.Generic;
using System.Threading.Tasks;

namespace Fortnox.SDK.Auth
{
    /// <summary>
    /// Represents methods of OAuth2 workflow
    /// </summary>
    public interface IStandardAuthWorkflow
    {
        /// <summary>
        /// Use this function exchange authorization code for an OAuth access token
        /// </summary>
        /// <param name="authCode">OAuth2 authorization code</param>
        /// <param name="clientId">ClientId given to you by Fortnox</param>
        /// <param name="clientSecret">ClientSecret given to you by Fortnox</param>
        /// <param name="redirectUri">RedirectUri given to you by Fortnox</param>
        /// <returns>OAuth2 token info</returns>
        TokenInfo GetToken(string authCode, string clientId, string clientSecret, string redirectUri = null);

        /// <summary>
        /// Use this function exchange authorization code for an OAuth access token
        /// </summary>
        /// <param name="authCode">OAuth2 authorization code</param>
        /// <param name="clientId">ClientId given to you by Fortnox</param>
        /// <param name="clientSecret">ClientSecret given to you by Fortnox</param>
        /// <param name="redirectUri">RedirectUri given to you by Fortnox</param>
        /// <returns>OAuth2 token info</returns>
        Task<TokenInfo> GetTokenAsync(string authCode, string clientId, string clientSecret, string redirectUri = null);

        /// <summary>
        /// Use this function to obtain new token info.
        /// Note, that the new refresh token is also generated by this action and the one used becomes invalid.
        /// </summary>
        /// <param name="refreshToken">OAuth2 refresh token</param>
        /// <param name="clientId">ClientId given to you by Fortnox</param>
        /// <param name="clientSecret">ClientSecret given to you by Fortnox</param>
        /// <returns>OAuth2 token info</returns>
        TokenInfo RefreshToken(string refreshToken, string clientId, string clientSecret);

        /// <summary>
        /// Use this function to obtain new token info.
        /// Note, that the new refresh token is also generated by this action and the one used becomes invalid.
        /// </summary>
        /// <param name="refreshToken">OAuth2 refresh token</param>
        /// <param name="clientId">ClientId given to you by Fortnox</param>
        /// <param name="clientSecret">ClientSecret given to you by Fortnox</param>
        /// <returns>OAuth2 token info</returns>
        Task<TokenInfo> RefreshTokenAsync(string refreshToken, string clientId, string clientSecret);

        /// <summary>
        /// Use this function build the auth uri for workflow initialization
        /// </summary>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <param name="scopes"></param>
        /// <param name="state"></param>
        /// <returns></returns>
        string BuildAuthUri(string clientId, IEnumerable<Scope> scopes, string state, string redirectUri = null);
    }

    /// <summary>
    /// Represents methods of a Fortnox legacy auth workflow
    /// </summary>
    [Obsolete("2021-12-09: End-of-life for the static authorization. Use StandardAuth.")]
    public interface IStaticTokenAuthWorkflow
    {
        /// <summary>
        /// <para>Use this function to activate new integration and retrieve Access-Token.</para>
        /// <remarks>Note that an authorization-code can be used only once. Save the retrieved Access-Token in order to use it for FortnoxClient.</remarks>
        /// </summary>
        /// <param name="authCode">The API-code (authorization code) given to you by Fortnox</param>
        /// <param name="clientSecret">The Client-Secret code given to you by Fortnox</param>
        /// <returns>The Access-Token to use with Fortnox</returns>
        string GetToken(string authCode, string clientSecret);

        /// <summary>
        /// <para>Use this function to activate new integration and retrieve Access-Token.</para>
        /// <remarks>Note that an authorization-code can be used only once. Save the retrieved Access-Token in order to use it for FortnoxClient.</remarks>
        /// </summary>
        /// <param name="authCode">The API-code (authorization code) given to you by Fortnox</param>
        /// <param name="clientSecret">The Client-Secret code given to you by Fortnox</param>
        /// <returns>The Access-Token to use with Fortnox</returns>
        Task<string> GetTokenAsync(string authCode, string clientSecret);
    }
}
